
/* -- ---------------------------------------------------------------------------------------- -- */
/* A15 - VIEWS OU VISOES */

SELECT c.NOME,c.SEXO,
		IFNULL(c.EMAIL,'SEM EMAIL') AS "EMAIL",
		t.TIPO,t.NUMERO,e.BAIRRO,e.CIDADE,e.ESTADO
	FROM CLIENTE c 
	INNER JOIN TELEFONE t 
	ON c.IDCLIENTE = t.ID_CLIENTE
	INNER JOIN ENDERECO e 
	ON c.IDCLIENTE = e.ID_CLIENTE 
	ORDER BY IDCLIENTE;

/* CRIANDO A VIEW */

CREATE VIEW RELATORIO AS 
SELECT c.NOME,c.SEXO,
		IFNULL(c.EMAIL,'SEM EMAIL') AS "EMAIL",
		t.TIPO,t.NUMERO,e.BAIRRO,e.CIDADE,e.ESTADO
	FROM CLIENTE c 
	INNER JOIN TELEFONE t 
	ON c.IDCLIENTE = t.ID_CLIENTE
	INNER JOIN ENDERECO e 
	ON c.IDCLIENTE = e.ID_CLIENTE 
	ORDER BY IDCLIENTE;

SELECT * FROM RELATORIO;

SELECT * FROM RELATORIO 
	WHERE SEXO = 'F';

UPDATE CLIENTE SET EMAIL = 'CLARA@GMAIL.COM'
	WHERE NOME = 'CLARA';

SHOW TABLES;

/* APAGANDO UMA VIEW */
DROP VIEW RELATORIO;

-- PREFIXO V_
CREATE VIEW V_RELATORIO AS 
SELECT c.NOME,c.SEXO,
		IFNULL(c.EMAIL,'SEM EMAIL') AS "EMAIL",
		t.TIPO,t.NUMERO,e.BAIRRO,e.CIDADE,e.ESTADO
	FROM CLIENTE c 
	INNER JOIN TELEFONE t 
	ON c.IDCLIENTE = t.ID_CLIENTE
	INNER JOIN ENDERECO e 
	ON c.IDCLIENTE = e.ID_CLIENTE 
	ORDER BY IDCLIENTE;

SHOW TABLES;

SELECT NOME,SEXO,CIDADE FROM V_RELATORIO;

DELETE FROM V_RELATORIO
	WHERE NOME = 'JOAO';
-- Can not delete from join view 'COMERCIO.V_RELATORIO'

INSERT INTO V_RELATORIO VALUES ();
-- Can not insert into join view 'COMERCIO.V_RELATORIO' without fields list


/* -- ---------------------------------------------------------------------------------------- -- */
/* A16 - DELIMITADOR E ESTADO DE SERVIDOR */
SELECT * FROM V_RELATORIO

SELECT * FROM V_RELATORIO; -- Ponto e Virgula

-- OS COMANDOS A SEGUIR FUNCIONAM APENAS EM LINHAS DE COMANDO - SHELL / PROMPT	
DELIMITER $ -- TROCAR O SIMBOLO DO DELIMITADOR ; to $

STATUS -- Informações do banco


/* -- ---------------------------------------------------------------------------------------- -- */
/* A17 - PROCEDURES */

/* CREATE PROCEDURE nome(
 * BEGIN
 * 		AÇÃO;
 * END
 * $ -- CONSULTAR O DELIMITER
 */

CREATE PROCEDURE CONTA()
BEGIN
	SELECT 10+10 AS "CONTA";	
END
$

/* CHAMANDO A PROCEDURE */
CALL CONTA()$
DELIMITER ;

/* PROCEDURE COM PARAMETROS */
DROP PROCEDURE CONTA; -- APAGANDO

DELIMITER $

CREATE PROCEDURE CONTA(NUM1 INT,NUM2 INT)
BEGIN
	SELECT NUM1+NUM2 AS "CONTA";	
END
$

DELIMITER ;

CALL CONTA(20,30);


/* -- --------------------------------------------------------------------------------------- -- */
/* A18 - PROCEDURES COM TABELAS */

CREATE TABLE CURSOS(
	IDCURSO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30) NOT NULL,
	HORAS INT(3) NOT NULL,
	VALOR FLOAT(10,2) NOT NULL
);

INSERT INTO CURSOS VALUES(NULL,'BANCO DE DADOS',25,200.00);
SELECT FROM * CURSOS;

/* DELIMITADOR */
DELIMITER $

CREATE PROCEDURE CAD_CURSO(P_NOME VARCHAR(30),P_HORAS INT(3),P_PRECO FLOAT(10,2))
BEGIN
	INSERT INTO CURSOS VALUES(NULL,P_NOME,P_HORAS,P_PRECO);	
END
$

DELIMITER ;
CALL CAD_CURSO("REDES",30,500.00);
SELECT * FROM CURSOS;

DELIMITER $
CREATE PROCEDURE SEL_CURSOS()
BEGIN
	SELECT * FROM CURSOS;	
END
$

DELIMITER ;
CALL SEL_CURSOS();


/* -- --------------------------------------------------------------------------------------- -- */
/* A19 - FUNCOES DE AGREGACAO NUMERICAS */

CREATE TABLE VENDEDORES(
	IDVENDEDOR INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	SEXO CHAR(1),
	JANEIRO FLOAT(10,2),
	FEVEREIRO FLOAT(10,2),
	MARCO FLOAT(10,2)
);

INSERT INTO VENDEDORES VALUES(NULL,'LUCAS','M',75353.30,320.00,973.34);
INSERT INTO VENDEDORES VALUES(NULL,'JOAO','M',53353.30,350.00,123.34);
INSERT INTO VENDEDORES VALUES(NULL,'CELIA','F',34353.30,3650.00,323.34);
INSERT INTO VENDEDORES VALUES(NULL,'MARIA','F',13353.30,360.00,123.34);
INSERT INTO VENDEDORES VALUES(NULL,'CHESMA','M',65353.30,320.00,444.34);
INSERT INTO VENDEDORES VALUES(NULL,'JAM','F',75243.30,360.00,33.34);
INSERT INTO VENDEDORES VALUES(NULL,'MARIO','M',753.30,390.00,321.34);

/* MAX - TRAZ O VALOR MAXIMO DE UMA COLUNA */

SELECT MAX(FEVEREIRO) AS MAIOR_FEV
	FROM VENDEDORES;

SELECT NOME, FEVEREIRO AS MAX_FEV
    FROM VENDEDORES
    WHERE FEVEREIRO = (SELECT MAX(FEVEREIRO) FROM VENDEDORES);


/* MIN - TRAZ O VALOR MINIMO DE UMA COLUNA */

SELECT MIN(FEVEREIRO) AS MIN_FEV
	FROM VENDEDORES;


/* MIN - TRAZ O VALOR MEDIO DE UMA COLUNA */

SELECT AVG(FEVEREIRO) AS MEDIA_FEV
	FROM VENDEDORES;

/* VARIAS FUNCOES */

SELECT MAX(JANEIRO) AS MAX_JAN,
	MIN(JANEIRO) AS MIN_JAN,
	AVG(JANEIRO) AS MEDIA_JAN
	FROM VENDEDORES;

/* TRUNCATE */

SELECT MAX(JANEIRO) AS MAX_JAN,
	MIN(JANEIRO) AS MIN_JAN,
	TRUNCATE(AVG(JANEIRO),2) AS MEDIA_JAN
	FROM VENDEDORES;


/* -- --------------------------------------------------------------------------------------- -- */
/* A20 - AGREGANDO COM SUM */

SELECT SUM(JANEIRO) AS TOTAL_JAN
	FROM VENDEDORES;

/* VENDAS POR SEXO */

SELECT SEXO,SUM(MARCO) AS TOTAL_MARCO
	FROM VENDEDORES
	GROUP BY SEXO;


/* -- --------------------------------------------------------------------------------------- -- */
/* A21- SUBQUERIES
 * VENDEDOR QUE MENOS VENDEU EM MARCO E O SEU NOME */
SELECT NOME, MARCO AS VENDAS_MIN_MARCO 
	FROM VENDEDORES 
	WHERE MARCO =(SELECT MIN(MARCO) FROM VENDEDORES); -- INNER QUERY( RESOLVIDA PRIMEIRA )

/* MAIOR VALOR */
SELECT NOME,MARCO AS VENDAS_MAX_MARCO
	FROM VENDEDORES
	WHERE MARCO = (SELECT MAX(MARCO) FROM VENDEDORES);

/* VENDEU MAIS QUE A MEDIA */
SELECT NOME,MARCO AS VENDAS_MAX_MARCO
	FROM VENDEDORES
	WHERE MARCO > (SELECT AVG(MARCO) FROM VENDEDORES);


/* -- --------------------------------------------------------------------------------------- -- */
/* A22 - OPERACOES EM LINHA */
SELECT * FROM VENDEDORES;
SELECT NOME,JANEIRO,FEVEREIRO,MARCO,(JANEIRO+FEVEREIRO+MARCO) AS "TOTAL", TRUNCATE((JANEIRO+FEVEREIRO+MARCO)/3,2) AS "MEDIA"
	FROM VENDEDORES;

/* APLICANDO UM %*/
SELECT NOME,JANEIRO,FEVEREIRO,MARCO,(JANEIRO+FEVEREIRO+MARCO) AS "TOTAL",
	(JANEIRO+FEVEREIRO+MARCO) * .25 AS "DESCONTO",
	TRUNCATE((JANEIRO+FEVEREIRO+MARCO)/3,2) AS "MEDIA"
	FROM VENDEDORES;


/* -- --------------------------------------------------------------------------------------- -- */
/* A23 - ALTERANDO TABELAS */
CREATE TABLE TABELA(
	COLUNA1 VARCHAR(30),
	COLUNA2 VARCHAR(30),
	COLUNA3 VARCHAR(30)
);

-- ADICIONANDO UMA PK
ALTER TABLE TABELA
	ADD PRIMARY KEY(COLUNA1);
DESC TABELA;

-- ADICIONANDO COLUNA SEM POSICAO. ULTIMA POSICAO
ALTER TABLE TABELA
	ADD COLUNA VARCHAR(30);

-- ADICIONANDO UMA COLUNA COM POSICAO
ALTER TABLE TABELA
	ADD COLUMN COLUNA4 VARCHAR(30) NOT NULL UNIQUE
	AFTER COLUNA3;
	
-- MODIFICANDO O TIPO DE UM CAMPO
ALTER TABLE TABELA MODIFY COLUNA2 DATE NOT NULL;

-- RENOMEANDO O NOME DA TABELA
ALTER TABLE TABELA
	RENAME PESSOA;

CREATE TABLE TIME(
	IDTIME INT PRIMARY KEY AUTO_INCREMENT,
	TIME VARCHAR(30),
	ID_PESSOA VARCHAR(30)
);
DESC TIME;

-- FOREIGN KEY
ALTER TABLE TIME
	ADD FOREIGN KEY(ID_PESSOA)
	REFERENCES PESSOA (COLUNA1);

-- DESCRICAO DETALHADA
SHOW CREATE TABLE TIME;


/* -- --------------------------------------------------------------------------------------- -- */
/* A24 - ORGANIZAÇAO DE CHAVES , CONSTRAINT(REGRA)*/
CREATE DATABASE TESTE_TIMES;

CREATE TABLE JOGADOR(
	IDJOGADOR INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30)
);

CREATE TABLE TIMES(
	IDTIME INT PRIMARY KEY AUTO_INCREMENT,
	NOMETIME VARCHAR(30),
	ID_JOGADOR INT,
	FOREIGN KEY(ID_JOGADOR) REFERENCES JOGADOR(IDJOGADOR)
);

INSERT INTO JOGADOR VALUES(NULL,'GUERREIRO');
INSERT INTO TIMES VALUES(NULL,'FLAMENGO',1);

SHOW CREATE TABLE JOGADOR;
SHOW CREATE TABLE TIMES;

-- DICA: PRIMEIRO CRIAR AS TABELAS E DEPOIS AS CHAVES(FK) POR FORA


/* -- --------------------------------------------------------------------------------------- -- */
/* A25 - ORGANIZANDO CHAVES E ACOES DE CONSTRAINTS */
CREATE TABLE CLIENTE(
	IDCLIENTE INT,
	NOME VARCHAR(30)
);

CREATE TABLE TELEFONE(
	IDTELEFONE INT,
	TIPO CHAR(3) NOT NULL,
	NUMERO VARCHAR(10) NOT NULL,
	ID_CLIENTE INT
);

ALTER TABLE CLIENTE ADD CONSTRAINT PK_CLIENTE 
PRIMARY KEY(IDCLIENTE);

ALTER TABLE TELEFONE ADD CONSTRAINT FK_CLIENTE_TELEFONE
FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTE(IDCLIENTE);

SHOW CREATE TABLE TELEFONE;

/* DICIONARIO DE DADOS */
SHOW DATABASES;
USE information_schema;
SHOW TABLES;
DESC TABLE_CONSTRAINTS;

SELECT CONSTRAINT_SCHEMA AS "BANCO", 
		TABLE_NAME AS "TABELA",
		CONSTRAINT_NAME AS "NOME DA REGRA",
		CONSTRAINT_TYPE AS "TIPO"
    	FROM TABLE_CONSTRAINTS
    	WHERE CONSTRAINT_SCHEMA = "TESTE_TIMES";
    
/* APAGANDO CONSTRAINTS */
STATUS;
USE TESTE_TIMES;
    
ALTER TABLE TELEFONE
DROP FOREIGN KEY FK_CLIENTE_TELEFONE;

-- CONFIRA NOVAMENTE EM INFORMATION_SCHEMA
-- E ADICIONE NOVAMENTE A CONSTRAINT


/* -- --------------------------------------------------------------------------------------- -- */
/* A26 - TRIGGERS */
/* ESTRUTURA DE UMA TRIGGER */
CREATE TRIGGER NOME
BEFORE/AFTER INSERT/DELETE/UPDATE ON TABELA
FOR EACH NOW (PARA CADA LINHA)
BEGIN -> INICIO
	QUALQUER COMANDO SQL
END -> FIM

CREATE DATABASE TESTE_TRIGGERS;
USE  TESTE_TRIGGERS;

CREATE TABLE USUARIO(
	IDUSUARIO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	LOGIN VARCHAR(30),
	SENHA VARCHAR(30)
);

CREATE TABLE BKP_USUARIO(
	IDBACKUP INT PRIMARY KEY AUTO_INCREMENT,
	IDUSUARIO INT,
	NOME VARCHAR(30),
	LOGIN VARCHAR(30)
);

/* CRIANDO A TRIGGER */
DELIMITER $
STATUS

CREATE TRIGGER BACKUP_USER
BEFORE DELETE ON USUARIO -- ANTES DE OCORRER UM DELETE NA TABELA USUARIO
FOR EACH ROW
BEGIN
	INSERT INTO BKP_USUARIO VALUES 
		(NULL,OLD.IDUSUARIO,OLD.NOME,OLD.LOGIN);
END
$

DELIMITER ;

INSERT INTO USUARIO VALUES (NULL,"LUCAS","TARMIEL","TARMIL123");
SELECT * FROM USUARIO;
DELETE FROM USUARIO WHERE IDUSUARIO = 1;
SELECT * FROM BKP_USUARIO;

/* VISUALIZAR TRIGGERS */
SHOW TRIGGERS FROM DB_NAME;


/* -- --------------------------------------------------------------------------------------- -- */
/* A27 - COMUNICAÇÃO ENTRE BANCOS */
CREATE DATABASE LOJA;
USE LOJA;
CREATE TABLE PRODUTO(
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);


CREATE DATABASE BACKUP;
USE BACKUP;
CREATE TABLE BKP_PRODUTO(
	IDBKP INT PRIMARY KEY AUTO_INCREMENT,
	IDPRODUTO INT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);

USE LOJA; -- USANDO O BANCO LOJA

-- INSERINDO EM BACKUP.BKP_PRODUTO DE LOJA
INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,1000,'TESTE',0.0);
SELECT * FROM BACKUP.BKP_PRODUTO;

DELIMITER $

-- BACKUP LÓGICO
-- PEGA OS DADOS ANTES DELES SEREM INSERIDOS NA TABELA
CREATE TRIGGER BACKUP_PRODUT
BEFORE INSERT ON PRODUTO
FOR EACH ROW
BEGIN
	INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,NEW.IDPRODUTO,NEW.NOME,NEW.VALOR);
END
$

DELIMITER ;

INSERT INTO PRODUTO VALUES (NULL,'PAMONHA',4.00);
INSERT INTO PRODUTO VALUES (NULL,'CAJU',10.00);
INSERT INTO PRODUTO VALUES (NULL,'CD',2.00);
INSERT INTO PRODUTO VALUES (NULL,'DVD',4.00);


-- OBSERVE O ID DO PRODUTO E OLHE COMO O TRIGGER FOI CRIADO...
SELECT * FROM BACKUP.BKP_PRODUTO;

CREATE DATABASE BACKUP_DELETE;
USE BACKUP_DELETE;
CREATE TABLE BKP_PRODUTO_DELETE(
	IDBKPDELETE INT PRIMARY KEY AUTO_INCREMENT,
	IDPRODUTO INT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);

DELIMITER $

CREATE TRIGGER BACKUP_PRODUTO_DELETE
BEFORE DELETE ON PRODUTO
FOR EACH ROW
BEGIN
	INSERT INTO BACKUP_DELETE.BKP_PRODUTO_DELETE VALUES(NULL,OLD.IDPRODUTO,OLD.NOME,OLD.VALOR);	
END
$

DELIMITER ;

DELETE FROM PRODUTO WHERE NOME = 'CAJU';
SELECT * FROM BACKUP_DELETE.BKP_PRODUTO_DELETE;


-- "CORRIGINDO" O ID DO PRODUTO NO TRIGGER INSERT
DROP TRIGGER BACKUP_PRODUT;
DELIMITER $

CREATE TRIGGER BACKUP_PRODUT
AFTER INSERT ON PRODUTO
FOR EACH ROW
BEGIN
	INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,NEW.IDPRODUTO,NEW.NOME,NEW.VALOR);
END
$

DELIMITER ;
INSERT INTO PRODUTO VALUES (NULL,'AMORA',12.00);
-- AGORA INSERE O ID, POIS ELE SO PEGA OS VALORES NA TABELA APOS O DADO SER INSERIDO
SELECT * FROM BACKUP.BKP_PRODUTO;


-- TESTANDO
ALTER TABLE BACKUP.BKP_PRODUTO 
ADD EVENTO CHAR(1);
ALTER TABLE BACKUP.BKP_PRODUTO
DROP COLUMN EVENTO;


/* -- --------------------------------------------------------------------------------------- -- */
/* A28 - TRIGGER DE AUDITORIA */

DROP DATABASE LOJA;
DROP DATABASE BACKUP;
DROP DATABASE BACKUP_DELETE;

CREATE DATABASE LOJA;
USE LOJA;
CREATE TABLE PRODUTO(
	IDPRODUTO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2)
);

INSERT INTO PRODUTO VALUES (NULL,'PAMONHA',4.00);
INSERT INTO PRODUTO VALUES (NULL,'CAJU',10.00);
INSERT INTO PRODUTO VALUES (NULL,'CD',2.00);
INSERT INTO PRODUTO VALUES (NULL,'DVD',4.00);


-- ....
SELECT NOW();
SELECT CURRENT_USER();

CREATE DATABASE BACKUP;
USE BACKUP;
CREATE TABLE BKP_PRODUTO(
	IDBKP INT PRIMARY KEY AUTO_INCREMENT,
	IDPRODUTO INT,
	NOME VARCHAR(30),
	VALOR_ORIGINAL FLOAT(10,2),
	VALOR_ALTERADO FLOAT(10,2),
	DATA DATETIME,
	USUARIO VARCHAR(30),
	EVENTO CHAR(1)
);

USE LOJA;
DELIMITER $

CREATE TRIGGER PRODUTO_UPDATE
AFTER UPDATE ON PRODUTO
FOR EACH ROW
BEGIN
	INSERT INTO BACKUP.BKP_PRODUTO VALUES(NULL,OLD.IDPRODUTO,OLD.NOME,OLD.VALOR,NEW.VALOR,NOW(),CURRENT_USER(),'U');	
END
$

DELIMITER ;
UPDATE PRODUTO SET VALOR = 110.00 
WHERE IDPRODUTO = 4;

SELECT * FROM BACKUP.BKP_PRODUTO;


/* -- --------------------------------------------------------------------------------------- -- */
/* A29 - AUTO RELACIONAMENTO */
CREATE DATABASE CURSOS;
USE CURSOS;
CREATE TABLE CURSOS(
	IDCURSO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	VALOR FLOAT(10,2),
	HORAS FLOAT(10,2),
	IDREQ INT
);

ALTER TABLE CURSOS ADD CONSTRAINT FK_IDREQ
FOREIGN KEY (IDREQ) REFERENCES CURSOS(IDCURSO);

INSERT INTO CURSOS VALUES (NULL,'BD RELACIONAL',20,400.00, NULL);
INSERT INTO CURSOS VALUES (NULL,'PROG 2',50,800.00, 1);
INSERT INTO CURSOS VALUES (NULL,'LINGUAGEM ',10,400.00, NULL);
INSERT INTO CURSOS VALUES (NULL,'AUDITORIA DE SISTEMAS',30,400.00,1);
INSERT INTO CURSOS VALUES (NULL,'MATEMATICA COMPUTACIONAL',40,500.00, 3);

SELECT * FROM CURSOS;
SELECT NOME,VALOR,HORAS,IFNULL(IDREQ,"SEM REQUISITOS") REQUISITO FROM CURSOS;

SELECT 
C.NOME AS CURSO,
C.VALOR AS VALOR,
C.HORAS AS CARGA,
IFNULL(P.NOME,"---") AS PREREQ
FROM CURSOS C
LEFT JOIN CURSOS P
ON P.IDCURSO = C.IDREQ


/* -- --------------------------------------------------------------------------------------- -- */
/* A30 - CURSORS */
CREATE DATABASE CURSORES;
USE CURSORES;

CREATE TABLE VENDEDORES(
	IDVENDEDOR INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(50),
	JAN INT,
	FEV INT,
	MARC INT
);

INSERT INTO VENDEDORES VALUES (NULL,'LUCAS',1400,2300,4400);
INSERT INTO VENDEDORES VALUES (NULL,'MARIA',2600,3000,1400);
INSERT INTO VENDEDORES VALUES (NULL,'CHESMA',6400,2300,6400);
INSERT INTO VENDEDORES VALUES (NULL,'JEFERSON',3400,12300,1400);

SELECT * FROM VENDEDORES;

SELECT NOME, (JAN+FEV+MARC) AS TOTAL FROM VENDEDORES;
SELECT NOME, (JAN+FEV+MARC) AS TOTAL, TRUNCATE((JAN+FEV+MARC)/3,2) AS MEDIA FROM VENDEDORES;

CREATE TABLE VEND_TOTAL (
	NOME VARCHAR(50),
	JAN INT,
	FEV INT,
	MARC INT,
	TOTAL INT,
	MEDIA INT
);

DELIMITER $

CREATE PROCEDURE INSERE_DADOS()
BEGIN
	DECLARE FIM INT DEFAULT 0;
	DECLARE VAR1, VAR2, VAR3,VTOTAL,VMEDIA INT;
	DECLARE VNOME VARCHAR(50);

	DECLARE REG CURSOR FOR(
		SELECT NOME, JAN, FEV, MARC FROM VENDEDORES	
	);

	DECLARE CONTINUE HANDLER FOR NOT FOUND SET FIM = 1;

	OPEN REG; -- JOGAR OS VALORES NA MEMORIA RAM

	REPEAT
		FETCH REG INTO VNOME, VAR1, VAR2, VAR3;
		IF NOT FIM THEN
			SET VTOTAL = VAR1+VAR2+VAR3;
			SET VMEDIA = VTOTAL/3;

			INSERT INTO VEND_TOTAL VALUES(VNOME,VAR1,VAR2,VAR3,VTOTAL,VMEDIA);  
		END IF;
	UNTIL FIM END REPEAT;
	CLOSE REG;
END
$

DELIMITER ;

SELECT * FROM VEND_TOTAL;
CALL INSERE_DADOS();
SELECT * FROM VEND_TOTAL;


/* -- --------------------------------------------------------------------------------------- -- */
/* A31 - SEGUNDA E TERCEIRAS FORMAS NORMAIS */
/*
	PRIMEIRA FN

	ATOMICIDADE - UM CAMPO NÃO PODE SER DIVISIVEL
	UM CAMPO NÃO PODE SER VETORIZADO
	PK CHAVE PRIMMARIA

*/
CREATE DATABASE CONSULTORIO;
USE CONSULTORIO;

CREATE TABLE PACIENTE(
	IDPACIENTE INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	SEXO CHAR(1),
	EMAIL VARCHAR(30),
	NASCIMENTO DATE
); 

CREATE TABLE MEDICO(
	IDMEDICO INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	SEXO CHAR(1),
	ESPECIALIDADE VARCHAR(30),
	FUNCIONARIO ENUM('S','N')
);

CREATE TABLE HOSPITAL(
	IDHOSPITAL INT PRIMARY KEY AUTO_INCREMENT,
	NOME VARCHAR(30),
	BAIRRO VARCHAR(30),
	CIDADE VARCHAR(30),
	ESTADO CHAR(2)
);

CREATE TABLE CONSULTA(
	IDCONSULTA INT PRIMARY KEY AUTO_INCREMENT,
	ID_PACIENT INT,
	ID_MEDICO INT,
	ID_HOSPITAL INT,
	DATA DATETIME,
	DIAGNOSTICO VARCHAR(50)
);

CREATE TABLE INTERNACAO(
	IDINTERNACAO INT PRIMARY KEY AUTO_INCREMENT,
	ENTRADA DATETIME,
	QUARTO INT,
	SAIDA DATETIME,
	OBSERVACOES VARCHAR(50),
	ID_CONSULTA INT UNIQUE
);

ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_PACIENTE
FOREIGN KEY(ID_PACIENT) REFERENCES PACIENTE(IDPACIENTE);
ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_MEDICO
FOREIGN KEY(ID_MEDICO) REFERENCES MEDICO(IDMEDICO);
ALTER TABLE CONSULTA ADD CONSTRAINT FK_CONSULTA_HOSPITAL
FOREIGN KEY(ID_HOSPITAL) REFERENCES HOSPITAL(IDHOSPITAL);

ALTER TABLE INTERNACAO ADD CONSTRAINT FK_INTERNACAO_CONSULTA
FOREIGN KEY(ID_CONSULTA) REFERENCES CONSULTA(IDCONSULTA);

SHOW DATABASES;
USE INFORMATION_SCHEMA;
DESC TABLE_CONSTRAINTS;


/* -- ---------------------------------------------------------------------------------------- -- */
/* End of the first part, I hope the content offered here has been useful */


